#pragma once
#include <iostream>
#include <vector>
#include <string>
using namespace std;
namespace cx_RBATree
{

	//红黑树的红黑表示用枚举类型
	enum Color
	{
		RED,
		BLACK
	};
	template <class K, class V>
	struct RBTreeNode
	{
		RBTreeNode<K, V>* _left;
		RBTreeNode<K, V>* _right;
		RBTreeNode<K, V>* _parent;
		pair<K, V> _kv;
		Color _col;

		RBTreeNode(const pair<K, V>& kv)
			:_left(nullptr)
			, _right(nullptr)
			, _parent(nullptr)
			, _kv(kv)
			, _col(RED)
		{}
	};

	template <class K, class V>
	class RBTree
	{
		typedef RBTreeNode<K, V> Node;
	public:

		~RBTree()
		{
			Destory();
		}
		Node* Find(const K& key)
		{
			Node* cur = _root;
			while (cur)
			{
				if (key > cur->_kv.first)
				{
					cur = cur->_right;
				}
				else if (key < cur->_kv.first)
				{
					cur = cur->_left;
				}
				else
				{
					return cur;
				}

			}
			return nullptr;
		}

		bool Insert(const pair<K, V>& kv)
		{
			if (_root == nullptr)
			{
				_root = new Node(kv);
				_root->_col = BLACK;
				return true;
			}
			Node* parent = nullptr;
			Node* cur = _root;
			while (cur)
			{
				if (cur->_kv.first > kv.first)
				{
					parent = cur;
					cur = cur->_left;
				}
				else if (cur->_kv.first < kv.first)
				{
					parent = cur;
					cur = cur->_right;
				}
				else//说明找到相同的数（不能插入）
				{
					return false;
				}
			}
			cur = new Node(kv);
			if (parent->_kv.first > kv.first)
			{
				parent->_left = cur;
			}
			else
			{
				parent->_right = cur;
			}
			cur->_parent = parent;
			//颜色调整
			while (parent && parent->_col == RED)
			{
				Node* grandfather = parent->_parent;
				if (grandfather->_left == parent)
				{
					Node* uncle = grandfather->_right;
					//情况1:u存在且为红，变色处理，继续向上调整
					if (uncle && uncle->_col == RED)
					{
						parent->_col = BLACK;
						uncle->_col = BLACK;
						grandfather->_col = RED;
						//继续向上调整
						cur = grandfather;
						parent = cur->_parent;
					}
					else//情况2+3：u不存在/存在且为黑，旋转+变色
					{
						//     g
						//   p   u
						// c 
						if (cur == parent->_left)
						{
							RotateR(grandfather);
							parent->_col = BLACK;
							grandfather->_col = RED;
						}
						else
						{
							//     g
							//   p   u
							//     c
							RotateL(parent);
							RotateR(grandfather);
							cur->_col = BLACK;
							grandfather->_col = RED;
						}
						break;
					}

				}
				else // (grandfather->_right == parent)
				{
					//    g
					//  u   p
					//        c
					Node* uncle = grandfather->_left;
					// 情况1：u存在且为红，变色处理，并继续往上处理
					if (uncle && uncle->_col == RED)
					{
						parent->_col = BLACK;
						uncle->_col = BLACK;
						grandfather->_col = RED;
						//向上调整
						cur = grandfather;
						parent = cur->_parent;
					}
					else // 情况2 + 3：u不存在 / u存在且为黑，旋转 + 变色
					{
						//    g
						//  u   p
						//        c
						if (cur == parent->_right)
						{
							RotateL(grandfather);
							grandfather->_col = RED;
							parent->_col = BLACK;
						}
						else//cur == parent->_left
						{
							//    g
							//  u   p
							//    c
							RotateR(parent);
							RotateL(grandfather);
							cur->_col = BLACK;
							grandfather->_col = RED;
						}
						break;

					}
				}
			}
			_root->_col = BLACK;
			return true;

		}
		void Destory()
		{
			_Destory(_root);
			_root = nullptr;
		}
		int Height()
		{
			return _Height(_root);
		}
		void InOrder()
		{
			_InOrder(_root);
		}
		bool IsBalance()
		{
			if (_root && _root->_col == RED)
			{
				cout << "根节点的颜色是红色" << endl;
				return false;
			}
			int benchmark = 0;//统计任意一条路径下黑色节点的个数
			Node* cur = _root;
			while (cur)
			{
				if (cur->_col == BLACK)
				{
					++benchmark;
				}
				cur = cur->_left;
			}
			//检查连续红色节点
			return _Check(_root, 0, benchmark);
		}
	private:
		void _Destory(Node* root)//后序销毁
		{
			if (root == nullptr)
				return;
			_Destory(root->_left);
			_Destory(root->_right);
			delete root;
			root = nullptr;
		}
		int _Height(Node* root)
		{
			if (root == nullptr)
				return 0;
			int LHeight = _Height(root->_left);
			int RHeight = _Height(root->_right);
			return LHeight > RHeight ? LHeight + 1 : RHeight + 1;
		}
		void _InOrder(Node* root)
		{
			if (root == nullptr)
				return;
			_InOrder(root->_left);
			cout << root->_kv.first << ": " << root->_kv.second << endl;
			_InOrder(root->_right);
		}
		bool _Check(Node* root, int blackNum, int benchmark)
		{
			if (root == nullptr)
			{
				if (benchmark != blackNum)
				{
					cout << "某条路径下的黑色节点个数不相等" << endl;
					return false;
				}
				return true;
			}
			if (root->_col == BLACK)
				++blackNum;
			if (root->_col == RED
				&& root->_parent
				&& root->_parent->_col == RED)
			{
				cout << "存在连续的红色节点" << endl;
				return false;
			}
			return _Check(root->_left, blackNum, benchmark)
				&& _Check(root->_right, blackNum, benchmark);
		}
	private://旋转
		void RotateL(Node* parent)//左单旋
		{
			Node* subR = parent->_right;
			Node* subRL = subR->_left;
			parent->_right = subRL;
			if (subRL)
			{
				subRL->_parent = parent;
			}
			Node* pparent = parent->_parent;
			subR->_left = parent;
			parent->_parent = subR;
			if (pparent == nullptr)
			{
				_root = subR;
				subR->_parent = nullptr;
			}
			else//pparent == nullptr
			{
				if (pparent->_left == parent)
				{
					pparent->_left = subR;
				}
				else
				{
					pparent->_right = subR;
				}
				subR->_parent = pparent;
			}
		}
		void RotateR(Node* parent)//右单旋
		{
			Node* subL = parent->_left;
			Node* subLR = subL->_right;
			parent->_left = subLR;
			if (subLR)
				subLR->_parent = parent;
			Node* pparent = parent->_parent;
			subL->_right = parent;
			parent->_parent = subL;
			if (pparent == nullptr)
			{
				_root = subL;
				subL->_parent = nullptr;
			}
			else//pparent != nullptr
			{
				if (pparent->_left == parent)
				{
					pparent->_left = subL;
				}
				else//pparent->_right == parent
				{
					pparent->_right = subL;
				}
				subL->_parent = pparent;
			}
		}
	private:
		Node* _root = nullptr;
	};

}




//红黑树的红黑表示用枚举类型
enum Color
{
	RED,
	BLACK
};
template <class T>
struct RBTreeNode
{
	RBTreeNode<T>* _left;
	RBTreeNode<T>* _right;
	RBTreeNode<T>* _parent;
	T _data;
	Color _col;

	RBTreeNode(const T&data)
		:_left(nullptr)
		, _right(nullptr)
		, _parent(nullptr)
		, _data(data)
		, _col(RED)
	{}
};

template<class T,class Ref,class Ptr>
struct __RBTreeIterator
{
	typedef RBTreeNode<T>  Node;
	typedef __RBTreeIterator<T, Ref, Ptr> Self;
	Node* _node;

	__RBTreeIterator(Node* node)
		:_node(node)
	{}
	//普通迭代器构造const迭代器
	__RBTreeIterator(const __RBTreeIterator<T, T&, T*>& it)
		:_node(it._node)
	{}

	Ref operator*()
	{
		return _node->_data;
	}
	Ptr operator->()
	{
		return &_node->_data;
	}
	bool operator!=(const Self& s)
	{
		return _node != s._node;
	}
	bool operator==(const Self& s)
	{
		return _node == s._node;
	}
	Self& operator++()
	{
		
		if (_node->_right)
		{
			//1.右不为空，下一个节点就是右子树的最左节点
			Node* suLeft = _node->_right;
			while (suLeft->_left)
			{
				suLeft = suLeft->_left;
			}
			_node = suLeft;
		}
		else//右为空，沿着根的路径，找到孩子是父亲左的那个祖先
		{
			Node* cur = _node;
			Node* parent = cur->_parent;
			while (parent && cur == parent->_right)
			{
				cur = parent;
				parent = parent->_parent;
			}
			_node = parent;
		}
		return *this;
	}
	Self& operator--()
	{
		if (_node->_left)
		{
			//左不为空，左子树最右节点
			Node* subRight = _node->_left;
			while (subRight->_right)
			{
				subRight = subRight->_right;
			}
			_node = subRight;
		}
		else
		{
			//1.左为空，孩子是父亲的右那个祖先
			Node* cur = _node;
			Node* parent = cur->_parent;
			while (parent && cur == parent->_left)
			{
				cur = parent;
				parent = parent->_parent;
			}
			_node = parent;
		}
		return *this;
	}
};


template <class K,class T,class KeyOfT>
class RBTree
{
	typedef RBTreeNode<T> Node;
public:
	typedef __RBTreeIterator<T, T&, T*> iterator;
	typedef __RBTreeIterator<T, const T&, const T*> const_iterator;

	~RBTree()
	{
		Destory();
	}

	iterator begin()
	{
		Node* cur = _root;
		while (cur->_left)
		{
			cur = cur->_left;
		}
		return iterator(cur);
	}
	iterator end()
	{
		return iterator(nullptr);
	}
	const_iterator begin()const
	{
		Node* cur = _root;
		while (cur&&cur->_left)
		{
			cur = cur->_left;
		}
		return const_iterator(cur);
	}
	const_iterator end()const
	{
		return const_iterator(nullptr);
	}
public:


	Node* Find(const K&key)
	{
		Node* cur = _root;
		KeyOfT kot;
		while (cur)
		{
			if (key > kot(cur->_data))
			{
				cur = cur->_right;
			}
			else if (key < kot(cur->_data))
			{
				cur = cur->_left;
			}
			else
			{
				return cur;
			}

		}
		return nullptr;
	}

	pair<iterator,bool> Insert(const T&data)
	{
		if (_root == nullptr)
		{
			_root = new Node(data);
			_root->_col = BLACK;
			return make_pair(iterator(_root),true);
		}
		KeyOfT kot;
		Node* parent = nullptr;
		Node* cur = _root;
		while (cur)
		{
			if ( kot(cur->_data)> kot(data))
			{
				parent = cur;
				cur = cur->_left;
			}
			else if (kot(cur->_data) < kot(data))
			{
				parent = cur;
				cur = cur->_right;
			}
			else//说明找到相同的数（不能插入）
			{
				return make_pair(iterator(cur),false);
			}
		}
		cur = new Node(data);
		Node* newnode = cur;
		if (kot(parent->_data) > kot(data))
		{
			parent->_left = cur;
		}
		else
		{
			parent->_right = cur;
		}
		cur->_parent = parent;
		//颜色调整
		while (parent && parent->_col == RED)
		{
			Node* grandfather = parent->_parent;
			if (grandfather->_left == parent)
			{
				Node* uncle = grandfather->_right;
				//情况1:u存在且为红，变色处理，继续向上调整
				if (uncle && uncle->_col == RED)
				{
					parent->_col = BLACK;
					uncle->_col = BLACK;
					grandfather->_col = RED;
					//继续向上调整
					cur = grandfather;
					parent = cur->_parent;
				}
				else//情况2+3：u不存在/存在且为黑，旋转+变色
				{
					//     g
					//   p   u
					// c 
					if (cur == parent->_left)
					{
						RotateR(grandfather);
						parent->_col = BLACK;
						grandfather->_col = RED;
					}
					else
					{
						//     g
						//   p   u
						//     c
						RotateL(parent);
						RotateR(grandfather);
						cur->_col = BLACK;
						grandfather->_col = RED;
					}
					break;
				}

			}
			else // (grandfather->_right == parent)
			{
				//    g
				//  u   p
				//        c
				Node* uncle = grandfather->_left;
				// 情况1：u存在且为红，变色处理，并继续往上处理
				if (uncle && uncle->_col == RED)
				{
					parent->_col = BLACK;
					uncle->_col = BLACK;
					grandfather->_col = RED;
					//向上调整
					cur = grandfather;
					parent = cur->_parent;
				}
				else // 情况2 + 3：u不存在 / u存在且为黑，旋转 + 变色
				{
					//    g
					//  u   p
					//        c
					if (cur == parent->_right)
					{
						RotateL(grandfather);
						grandfather->_col = RED;
						parent->_col = BLACK;
					}
					else//cur == parent->_left
					{
						//    g
						//  u   p
						//    c
						RotateR(parent);
						RotateL(grandfather);
						cur->_col = BLACK;
						grandfather->_col = RED;
					}
					break;

				}
			}
		}
		_root->_col = BLACK;
		return make_pair(iterator(newnode),true);

	}
	void Destory()
	{
		_Destory(_root);
		_root = nullptr;
	}
	int Height()
	{
		return _Height(_root);
	}
	void InOrder()
	{
		_InOrder(_root);
	}
	
	bool IsBalance()
	{
		if (_root && _root->_col == RED)
		{
			cout << "根节点的颜色是红色" << endl;
			return false;
		}
		int benchmark = 0;//统计任意一条路径下黑色节点的个数
		Node* cur = _root;
		while (cur)
		{
			if (cur->_col == BLACK)
			{
				++benchmark;
			}
			cur = cur->_left;
		}
		//检查连续红色节点
		return _Check(_root, 0, benchmark);
	}
private:
	void _Destory(Node* root)//后序销毁
	{
		if (root == nullptr)
			return;
		_Destory(root->_left);
		_Destory(root->_right);
		delete root;
		root = nullptr;
	}
	int _Height(Node* root)
	{
		if (root == nullptr)
			return 0;
		int LHeight = _Height(root->_left);
		int RHeight = _Height(root->_right);
		return LHeight > RHeight ? LHeight + 1 : RHeight + 1;
	}

	bool _Check(Node* root, int blackNum, int benchmark)
	{
		if (root == nullptr)
		{
			if (benchmark != blackNum)
			{
				cout << "某条路径下的黑色节点个数不相等" << endl;
				return false;
			}
			return true;
		}
		if (root->_col == BLACK)
			++blackNum;
		if (root->_col == RED
			&& root->_parent
			&& root->_parent->_col == RED)
		{
			cout << "存在连续的红色节点" << endl;
			return false;
		}
		return _Check(root->_left, blackNum, benchmark)
			&& _Check(root->_right, blackNum, benchmark);
	}
	void _InOrder(Node* root)
	{
		KeyOfT kot;
		if (root == nullptr)
			return;
		_InOrder(root->_left);
		cout << kot(root->_data)<< endl;
		_InOrder(root->_right);
	}

private://旋转
	void RotateL(Node* parent)//左单旋
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		parent->_right = subRL;
		if (subRL)
		{
			subRL->_parent = parent;
		}
		Node* pparent = parent->_parent;
		subR->_left = parent;
		parent->_parent = subR;
		if (pparent == nullptr)
		{
			_root = subR;
			subR->_parent = nullptr;
		}
		else//pparent == nullptr
		{
			if (pparent->_left == parent)
			{
				pparent->_left = subR;
			}
			else
			{
				pparent->_right = subR;
			}
			subR->_parent = pparent;
		}
	}
	void RotateR(Node* parent)//右单旋
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		parent->_left = subLR;
		if (subLR)
			subLR->_parent = parent;
		Node* pparent = parent->_parent;
		subL->_right = parent;
		parent->_parent = subL;
		if (pparent == nullptr)
		{
			_root = subL;
			subL->_parent = nullptr;
		}
		else//pparent != nullptr
		{
			if (pparent->_left == parent)
			{
				pparent->_left = subL;
			}
			else//pparent->_right == parent
			{
				pparent->_right = subL;
			}
			subL->_parent = pparent;
		}
	}
private:
	Node* _root = nullptr;
};